{"version":3,"sources":["../../server/routes/recipes.js"],"names":["express","require","router","Router","mongoose","recipeSchema","get","req","res","queryParams","getParsedParamObject","query","find","applyQueryParamsToQuery","exec","err","recipes","sendError","message","status","send","data","findById","params","id","post","recipe","title","body","description","postedBy","imageUrl","ingredients","instructions","create","createdRecipe","delete","errorMessage","remove","Types","ObjectId","errorNumber","whereParam","where","sortParam","sort","selectParam","select","skipParam","skip","limitParam","limit","countParam","count","key","undefined","JSON","parse","Promise","global","module","exports"],"mappings":"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","file":"recipes.js","sourcesContent":["let express = require('express'),\n    router = express.Router(),\n    mongoose = require('mongoose'),\n    recipeSchema = require('../models/recipe.js');\n\n// GET ALL RECIPES\nrouter.get('/', function(req, res) {\n    let queryParams = getParsedParamObject(req);\n    let query = recipeSchema.find({});\n    applyQueryParamsToQuery(query, queryParams);\n\n    query.exec(function (err, recipes) {\n        if (err) {\n            sendError(res, err.message, 500);\n        } else {\n            res.status(200).send({\n                message: 'OK',\n                data: recipes\n            });\n        }\n    });\n});\n\n// GET A SINGLE RECIPE BY ID\nrouter.get('/:id', function(req, res) {\n    let queryParams = getParsedParamObject(req);\n    let query = recipeSchema.findById(req.params.id);\n    applyQueryParamsToQuery(query, queryParams);\n\n    query.exec(function (err, recipes) {\n        if (err) {\n            sendError(res, err.message, 500);\n        } else {\n            res.status(200).send({\n                message: 'OK',\n                data: recipes\n            });\n        }\n    });\n});\n\n// POST A RECIPE\nrouter.post('/', function(req, res) {\n    let recipe = {\n        title: req.body.title,\n        description: req.body.description,\n        postedBy: req.body.postedBy,\n        imageUrl: req.body.imageUrl,\n        ingredients: req.body.ingredients,\n        instructions: req.body.instructions\n    };\n\n    recipeSchema.create(recipe, function (err, createdRecipe) {\n        if (err) {\n            sendError(res, err.message, 500);\n        } else {\n            res.status(201).send({\n                message: 'Recipe added',\n                data: createdRecipe\n            });\n        }\n    });\n});\n\n// DELETE A RECIPE BY ID\nrouter.delete('/:id', function(req, res) {\n    recipeSchema.findById(req.params.id, function (err, recipe) {\n        if (err || recipe === null) {\n            let errorMessage = \"Recipe not found\";\n            sendError(res, errorMessage, 404);\n        } else {\n            recipeSchema.remove({\"_id\": mongoose.Types.ObjectId(req.params.id)}, function (err, recipe) {\n                if (err) {\n                    let errorMessage = \"Recipe not found\";\n                    sendError(res, errorMessage, 404);\n                } else {\n                    res.status(200).send({\n                        message: 'Recipe deleted',\n                        data: recipe\n                    });\n                }\n            });\n        }\n    });\n});\n\n\n// HELPER FUNCTIONS\nfunction sendError(res, errorMessage, errorNumber) {\n    res.status(errorNumber).send({\n        message: errorMessage,\n        data: []\n    });\n}\n\nfunction getParsedParamObject(req) {\n    let queryParams = {\n        whereParam: req.query.where,\n        sortParam: req.query.sort,\n        selectParam: req.query.select,\n        skipParam: req.query.skip,\n        limitParam: req.query.limit,\n        countParam: req.query.count\n    };\n\n    for (let key in queryParams) {\n        if (queryParams[key] === null || queryParams[key] === undefined) {\n            delete queryParams[key];\n        } else {\n            queryParams[key] = JSON.parse(queryParams[key]);\n        }\n    }\n\n    return queryParams;\n}\n\nfunction applyQueryParamsToQuery(query, queryParams) {\n    for (let key in queryParams) {\n        if (key === \"limitParam\") {\n            query.limit(queryParams.limitParam);\n        } else if (key === \"countParam\" && (queryParams.countParam === true)) {\n            query.count();\n        } else if (key === \"selectParam\") {\n            query.select(queryParams.selectParam);\n        } else if (key === \"sortParam\") {\n            query.sort(queryParams.sortParam);\n        } else if (key === \"skipParam\") {\n            query.skip(queryParams.skipParam);\n        } else if (key === \"whereParam\") {\n            query.where(queryParams.whereParam);\n        }\n    }\n}\n\nmongoose.Promise = global.Promise;\nmodule.exports = function() {return router};\n"]}