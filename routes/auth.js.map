{"version":3,"sources":["../../server/routes/auth.js"],"names":["secrets","require","User","jwt","bcrypt","VerifyToken","module","exports","router","regRoute","route","userRoute","loginRoute","logoutRoute","post","req","res","create","name","body","username","password","profilePicUrl","imageUrl","err","user","status","send","message","data","token","sign","id","_id","secret","expiresIn","auth","get","findById","userId","findOne","passwordValid"],"mappings":"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","file":"auth.js","sourcesContent":["var secrets = require('../config/secrets');\nvar User = require('../models/user.js');\nvar jwt = require('jsonwebtoken');\nvar bcrypt = require('bcryptjs');\nvar VerifyToken = require('./verifyToken');\n\nmodule.exports = function (router) {\n\tvar regRoute = router.route('/register'); // Register\n\tvar userRoute = router.route('/me'); // User\n\tvar loginRoute = router.route('/login') // Log in\n\tvar logoutRoute = router.route('/logout') // Log out\n\n\t/**\n\t* @api {post} /register Register a new user\n\t*\n\t*/\n\tregRoute.post(function(req, res) {\n\n\t\tUser.create({\n\t\t\tname: req.body.name,\n\t\t\tusername: req.body.username,\n\t\t\tpassword: req.body.password,\n\t\t\tprofilePicUrl: req.body.imageUrl\n\t\t}, function(err, user) {\n\t\t\tif (err) return res.status(500).send({message: 'There was a problem registering the user.', data: err}); // 500 Server Error\n\n\t\t\t// Create a token\n\t\t\tvar token = jwt.sign({id: user._id}, secrets.secret, {\n\t\t\t\texpiresIn: 86400 // Expires in 24 hours\n\t\t\t});\n\n\t\t\tres.status(200).send({message: 'Registration successful.', auth: true, token: token}); //Success\n\t\t});\n\t});\n\n\n\t/**\n\t* @api {get} /me Return a user with an authentication token\n\t*\n\t*/\n\tuserRoute.get(VerifyToken, function(req, res){\n\n\t\t// Retrieve user\n\t\tUser.findById(req.userId, {password: 0}, function(err, user) {\n\t\t\tif (err) return res.status(500).send({message: 'There was a problem retrieving the user.', data: []}); // 500 Server Error\n\t\t\tif (!user) return res.status(404).send({message: 'User not found.', data: []}); // 404 Not found\n\t\t\tres.status(200).send({message: 'User found.', data: user}); // Success\n\t\t});\n\n\t});\n\n\n\t/**\n\t* @api {post} /login Log a user in and issue a token\n\t*\n\t*/\n\tloginRoute.post(function(req, res) {\n\t\tUser.findOne({username: req.body.username}, function(err, user){\n\t\t\tif (err) return res.status(500).send({message: 'Server Error', data: []}); // 500 Server Error\n\t\t\tif (!user) return res.status(404).send({message: 'User not found.', data: []}); // 404 Not Found\n\n\t\t\t// Check if provided password is valid\n\t\t\tvar passwordValid = (req.body.password === user.password);\n\t\t\tif(!passwordValid) return res.status(401).send({message: 'Invalid password.', auth: false, token: null, data: []});\n\n\t\t\tvar token = jwt.sign({id: user._id}, secrets.secret, {\n\t\t\t\texpiresIn: 86400 // Expires in 24 hours\n\t\t\t});\n\n\t\t\tres.status(200).send({message: 'Login successful.', auth: true, token: token}); // Success\n\t\t});\n\t});\n\n\n\t/**\n\t* @api {get} /logout Log a user out.\n\t*\n\t*/\n\n\tlogoutRoute.get(function(req, res) {\n\t\tif (err) return res.status(500).send({message: 'Server Error', data: []});\n\t\tres.status(200).send({message: 'Logout successful.', auth: false, token: null });\n\t});\n\n\treturn router;\n}\n"]}